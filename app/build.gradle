apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.mi.activitytest"
        minSdkVersion 26
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
//        testInstrumentationRunner
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
//    只参与单元测试编译，不会打包到debug/release apk包中，不需要设备支持。
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
//    uiautomator
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    androidTestImplementation 'org.testng:testng:6.10'
    testImplementation 'org.testng:testng:6.10'
//    androidTestImplementation 'io.appium:java-client:7.1.0'
//    testImplementation 'io.appium:java-client:7.1.0'
}

// jacoco
task jacocoTestReport(type:JacocoReport,dependsOn:"connectedAndroidTest"){//,dependsOn:"connectedAndroidTest"
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports{
        xml.enabled = false
        html.enabled = true
        csv.enabled = false
    }
    classDirectories = fileTree(
            dir : "${project.rootDir}/app/build/intermediates/javac/debug/compileDebugJavaWithJavac",
            excludes : [
                    '**/*Test.class',
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*'
            ]
    )
    def coverageSourceDirs = ['src/main/java']
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    additionalClassDirs = files(coverageSourceDirs)
//    executionData = files("$buildDir/outputs/code-coverage/connected/coverage.ec")
}